#include <iostream>
using namespace std;

// Node structure
struct Node {
    int data;
    Node* left;
    Node* right;

    // Constructor
    Node(int val) {
        data = val;
        left = right = nullptr;
    }
};

// BST class
class BST {
public:
    Node* root;

    BST() {
        root = nullptr;
    }

    // Insert a value
    Node* insert(Node* node, int val) {
        if (node == nullptr)
            return new Node(val);
        
        if (val < node->data)
            node->left = insert(node->left, val);
        else if (val > node->data)
            node->right = insert(node->right, val);
        
        return node;
    }

    // Search a value
    bool search(Node* node, int key) {
        if (node == nullptr)
            return false;

        if (node->data == key)
            return true;
        else if (key < node->data)
            return search(node->left, key);
        else
            return search(node->right, key);
    }

    // Inorder traversal
    void inorder(Node* node) {
        if (node == nullptr)
            return;

        inorder(node->left);
        cout << node->data << " ";
        inorder(node->right);
    }

    // Find minimum value node in a tree
    Node* findMin(Node* node) {
        while (node && node->left != nullptr)
            node = node->left;
        return node;
    }

    // Delete a value
    Node* deleteNode(Node* node, int key) {
        if (node == nullptr)
            return node;

        if (key < node->data)
            node->left = deleteNode(node->left, key);
        else if (key > node->data)
            node->right = deleteNode(node->right, key);
        else {
            // Node found
            if (node->left == nullptr) {
                Node* temp = node->right;
                delete node;
                return temp;
            } else if (node->right == nullptr) {
                Node* temp = node->left;
                delete node;
                return temp;
            }

            // Node with two children
            Node* temp = findMin(node->right);
            node->data = temp->data;
            node->right = deleteNode(node->right, temp->data);
        }
        return node;
    }
};

// Driver code
int main() {
    BST bst;

    bst.root = bst.insert(bst.root, 50);
    bst.insert(bst.root, 30);
    bst.insert(bst.root, 70);
    bst.insert(bst.root, 20);
    bst.insert(bst.root, 40);
    bst.insert(bst.root, 60);
    bst.insert(bst.root, 80);

    cout << "Inorder Traversal: ";
    bst.inorder(bst.root);
    cout << endl;

    int key = 40;
    cout << "Searching for " << key << ": ";
    cout << (bst.search(bst.root, key) ? "Found" : "Not Found") << endl;

    bst.root = bst.deleteNode(bst.root, 70);

    cout << "Inorder After Deletion: ";
    bst.inorder(bst.root);
    cout << endl;

    return 0;
}
 dekh joh phla node hai  woh inset hoga agr root null hai toh root ywh bn jayegab  phirjoh apnn value dalthe jayega aur root null nhi hoga toh insert function always root hi return krega , au 
 aur value toh insert hothi jauyegi
