In C++, **heaps** are typically implemented using the **priority queue** from the Standard Template Library (STL), or by manually using a vector or array with `make_heap`, `push_heap`, and `pop_heap` functions.

---

## 🔷 What is a Heap?

A **heap** is a special **complete binary tree**:

* **Max Heap**: Parent ≥ children (largest element at root)
* **Min Heap**: Parent ≤ children (smallest element at root)

---

## ✅ Using `priority_queue` (Default is Max Heap)

```cpp
#include <iostream>
#include <queue>
using namespace std;

int main() {
    priority_queue<int> maxHeap;

    maxHeap.push(10);
    maxHeap.push(5);
    maxHeap.push(20);
    maxHeap.push(15);

    while (!maxHeap.empty()) {
        cout << maxHeap.top() << " ";  // prints highest priority element
        maxHeap.pop();
    }

    return 0;
}
```

**Output**:

```
20 15 10 5
```

---

## ✅ Min Heap using `priority_queue`

```cpp
#include <iostream>
#include <queue>
#include <vector>
using namespace std;

int main() {
    // Use greater<int> to turn it into Min Heap
    priority_queue<int, vector<int>, greater<int>> minHeap;

    minHeap.push(10);
    minHeap.push(5);
    minHeap.push(20);
    minHeap.push(15);

    while (!minHeap.empty()) {
        cout << minHeap.top() << " ";
        minHeap.pop();
    }

    return 0;
}
```

**Output**:

```
5 10 15 20
```

---

## ✅ Manual Heap using `make_heap`, `push_heap`, and `pop_heap`

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main() {
    vector<int> heap = {10, 5, 20, 15};

    make_heap(heap.begin(), heap.end());  // Convert to max heap

    heap.push_back(25);
    push_heap(heap.begin(), heap.end());  // Maintain heap property

    pop_heap(heap.begin(), heap.end());  // Move max to end
    heap.pop_back();                     // Remove max

    for (int i : heap)
        cout << i << " ";

    return 0;
}
```

---

## 🔍 Time Complexities

| Operation         | Time     |
| ----------------- | -------- |
| Insert (push)     | O(log n) |
| Remove top (pop)  | O(log n) |
| Access top (peek) | O(1)     |

---

## 📘 Common Use-Cases

* Dijkstra’s algorithm (min heap)
* Huffman encoding
* Task scheduling
* Median finding

---

Let me know if you want a custom heap implementation (with arrays), or a deep explanation of heap sort or heapify.


#include <iostream>
#include <vector>
using namespace std;

class MaxHeap {
private:
    vector<int> heap;  // Vector to store heap elements

    // Helper function to maintain heap property after insertion
    void heapifyUp(int index) {
        while (index > 0) {
            int parent = (index - 1) / 2;  // Find parent index

            // If current node is greater than parent, swap them
            if (heap[parent] < heap[index]) {
                swap(heap[parent], heap[index]);
                index = parent;  // Move up to parent
            } else {
                break;  // Heap property satisfied
            }
        }
    }

    // Helper function to maintain heap property after deletion
    void heapifyDown(int index) {
        int size = heap.size();

        while (index < size) {
            int left = 2 * index + 1;   // Left child index
            int right = 2 * index + 2;  // Right child index
            int largest = index;       // Assume current is largest

            // Compare with left child
            if (left < size && heap[left] > heap[largest]) {
                largest = left;
            }

            // Compare with right child
            if (right < size && heap[right] > heap[largest]) {
                largest = right;
            }

            // If largest is not the current node, swap
            if (largest != index) {
                swap(heap[index], heap[largest]);
                index = largest;  // Continue heapifying down
            } else {
                break;  // Heap property satisfied
            }
        }
    }

public:
    // Insert a new value into heap
    void insert(int value) {
        heap.push_back(value);              // Step 1: Add to end
        heapifyUp(heap.size() - 1);         // Step 2: Fix upward
    }

    // Delete the max element (root) from heap
    void deleteMax() {
        if (heap.empty()) {
            cout << "Heap is empty!\n";
            return;
        }

        cout << "Deleting max element: " << heap[0] << endl;

        heap[0] = heap.back();  // Step 1: Replace root with last
        heap.pop_back();        // Step 2: Remove last element
        heapifyDown(0);         // Step 3: Fix downward
    }

    // Display heap as array
    void display() {
        cout << "Heap elements: ";
        for (int val : heap) {
            cout << val << " ";
        }
        cout << endl;
    }
};

int main() {
    MaxHeap h;

    h.insert(10);
    h.insert(5);
    h.insert(30);
    h.insert(20);

    h.display();      // Expected: 30 20 10 5 (max at top)

    h.deleteMax();    // Remove 30
    h.display();      // Expected: 20 5 10

    return 0;
}
