
рдЪрд▓реЛ рдЕрдм **reversing** рдХреЛ рдареАрдХ рд╕реЗ рд╕рдордЭрддреЗ рд╣реИрдВ! ЁЯШК  

### **ЁЯФД Reverse рдХрд░рдиреЗ рдХреА рдкреНрд░рдХреНрд░рд┐рдпрд╛:**
рдЬрдм рд╣рдордиреЗ **рд╢рдмреНрджреЛрдВ (words) рдХреЛ stack рдореЗрдВ рдбрд╛рд▓ рд▓рд┐рдпрд╛**, рдЕрдм рдЙрдиреНрд╣реЗрдВ **рдЙрд▓реНрдЯрд╛ (reverse)** рдХрд░рдирд╛ рд╣реЛрдЧрд╛ред  
Stack **LIFO (Last In, First Out)** рдирд┐рдпрдо рдкрд░ рдХрд╛рдо рдХрд░рддрд╛ рд╣реИтАФрдЬреЛ **рд╕рдмрд╕реЗ рдкрд╣рд▓реЗ рдЧрдпрд╛, рд╡реЛ рд╕рдмрд╕реЗ рдЖрдЦрд┐рд░реА рдирд┐рдХрд▓реЗрдЧрд╛**ред  
рдЗрд╕рдХрд╛ рдлрд╛рдпрджрд╛ рдпрд╣ рд╣реИ рдХрд┐ рд╣рдо рд╕реАрдзреЗ **stack рд╕реЗ рдирд┐рдХрд╛рд▓рдХрд░** string рдХреЛ reverse рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред

---

### **ЁЯЫа Reverse рдХрд░рдиреЗ рдХреЗ Steps:**
1. **Stack рд╕реЗ рдПрдХ-рдПрдХ рд╢рдмреНрдж рдирд┐рдХрд╛рд▓реЛ**  
2. **рдЙрдиреНрд╣реЗрдВ рдирдпреА string (`ans`) рдореЗрдВ рдЬреЛрдбрд╝реЛ**  
3. **рдЕрдВрдд рдореЗрдВ рдкреВрд░рд╛ reversed sentence print рдХрд░ рджреЛ**

---

### **тЪЩ Code рдореЗрдВ рдХреИрд╕реЗ рд╣реЛрддрд╛ рд╣реИ?**
```cpp
string ans = ""; // рдирдпреА reversed string
while (st.size() != 1)  // рдЬрдм рддрдХ stack рдореЗрдВ 1 рд╕реЗ рдЬреНрдпрд╛рджрд╛ рд╢рдмреНрдж рд╣реИрдВ
{
    ans += st.top() + " "; // рд╕рдмрд╕реЗ рдКрдкрд░ рд╡рд╛рд▓рд╛ рд╢рдмреНрдж рд▓реЛ рдФрд░ space рдЬреЛрдбрд╝реЛ
    st.pop(); // рд╢рдмреНрдж рдХреЛ stack рд╕реЗ рдирд┐рдХрд╛рд▓реЛ
}
ans += st.top(); // рдЕрдВрддрд┐рдо рд╢рдмреНрдж рдЬреЛрдбрд╝реЛ (рдмрд┐рдирд╛ extra space рдХреЗ)
```
ЁЯФ╣ **рд╣рд░ рдмрд╛рд░ `st.top()` рд╣рдореЗрдВ рд╕рдмрд╕реЗ рдКрдкрд░ рдХрд╛ рд╢рдмреНрдж рджреЗрддрд╛ рд╣реИред**  
ЁЯФ╣ **рд╣рдо `st.pop()` рд╕реЗ рдЙрд╕реЗ рдирд┐рдХрд╛рд▓рддреЗ рд╣реИрдВ рдФрд░ `ans` рдореЗрдВ рдЬреЛрдбрд╝рддреЗ рд╣реИрдВред**  
ЁЯФ╣ **рдЕрдВрдд рдореЗрдВ `ans` рдореЗрдВ рдкреВрд░рд╛ reversed sentence рдмрди рдЬрд╛рддрд╛ рд╣реИред**

---

### **ЁЯФе Dry Run - рдХреИрд╕реЗ Reverse рд╣реЛ рд░рд╣рд╛ рд╣реИ?**
#### **ЁЯТ╗ Stack рдореЗрдВ рд╢реБрд░реБрдЖрдд рдореЗрдВ:**
```
["TUF", "is", "great", "for", "interview", "preparation"]
```
#### **ЁЯФД Step-by-step pop рдХрд░рдХреЗ reverse рдХрд░реЗрдВ:**
1. `"preparation"` -> **ans = `"preparation "`**  
2. `"interview"` -> **ans = `"preparation interview "`**  
3. `"for"` -> **ans = `"preparation interview for "`**  
4. `"great"` -> **ans = `"preparation interview for great "`**  
5. `"is"` -> **ans = `"preparation interview for great is "`**  
6. `"TUF"` -> **ans = `"preparation interview for great is TUF"`**  

ЁЯОЙ **Final Output:**  
```
After reversing words:
preparation interview for great is TUF
```

---

### **ЁЯУЭ Summary**
1я╕ПтГг рдкрд╣рд▓реЗ string рдХреЛ spaces рд╕реЗ рдЕрд▓рдЧ рдХрд░рдХреЗ stack рдореЗрдВ рдбрд╛рд▓рддреЗ рд╣реИрдВред  
2я╕ПтГг рдлрд┐рд░ stack рд╕реЗ **LIFO рдЖрдзрд╛рд░ рдкрд░** рд╢рдмреНрдж рдирд┐рдХрд╛рд▓рддреЗ рд╣реИрдВ рдФрд░ рдирдпреА `ans` string рдореЗрдВ рдЬреЛрдбрд╝рддреЗ рд╣реИрдВред  
3я╕ПтГг рд╕рдмрд╕реЗ рдкрд╣рд▓реЗ рд╡рд╛рд▓рд╛ рд╢рдмреНрдж **рд╕рдмрд╕реЗ рдЖрдЦрд┐рд░реА рдЖрддрд╛ рд╣реИ**, рдЬрд┐рд╕рд╕реЗ **рд╕рд╣реА reversal** рд╣реЛ рдЬрд╛рддрд╛ рд╣реИ!  

рдЕрдм clear рд╣реБрдЖ? ЁЯЪАЁЯШГ рдпрд╛ рдХреЛрдИ рдФрд░ modification рдЪрд╛рд╣рд┐рдП? ЁЯШКтЬи#include<bits/stdc++.h> using namespace std; int main() { string s="TUF is great for interview preparation"; cout<<s.length()<<endl; cout<<s<<endl; s+=" "; stack<string> st; int i; string str=""; for(i=0;i<s.length();i++) { if(s[i]==' ') { st.push(str); str=""; } else str+=s[i]; } string ans=""; while(st.size()!=1) { ans+=st.top()+" "; st.pop(); } ans+=st.top(); cout<<"After reversing words: "<<endl; cout<<ans; return 0;
